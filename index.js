"use strict";var require$$0$1=require("fs"),require$$0=require("path"),require$$2$1=require("minimist"),require$$1=require("chalk"),require$$2=require("cross-spawn"),require$$4=require("fs-extra");function _interopDefaultLegacy(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var require$$0__default$1=_interopDefaultLegacy(require$$0$1),require$$0__default=_interopDefaultLegacy(require$$0),require$$2__default$1=_interopDefaultLegacy(require$$2$1),require$$1__default=_interopDefaultLegacy(require$$1),require$$2__default=_interopDefaultLegacy(require$$2),require$$4__default=_interopDefaultLegacy(require$$4),commonjsGlobal="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function getDefaultExportFromCjs(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}var es={},sync={},utils={};!function(e){Object.defineProperty(e,"__esModule",{value:!0}),e.globalInject=e.override=e.configCreate=e.descResolver=e.resolver=e.command=e.FileType=e.Action=void 0;const t=require$$0__default.default,r=require$$1__default.default;var n,i;(i=n=e.Action||(e.Action={})).COPY="COPY",i.REMOVE="REMOVE",i.CREATE="CREATE",(i=e.FileType||(e.FileType={})).FILE="FILE",i.FOLDER="FOLDER",e.command=({cmd:o=[]})=>{const r=require$$2__default.default;return new Promise((i,e)=>{0===o.length&&e(Error("没输入命令"));e=o.slice(1);r(o[0],e,{stdio:"inherit"}).on("close",e=>{console.log("close",e),i(e)})})},e.resolver=(i,o,r)=>e=>e.map(([e])=>({action:i?n.COPY:n.REMOVE,origin:i?t.resolve(i):null,target:o?t.join(e,o):t.join(e,i),changedCheckAndBackup:r})),e.descResolver=(i,o)=>e=>e.map(([e])=>({action:n.CREATE,origin:o,target:t.join(e,i),changedCheckAndBackup:!1})),e.configCreate=e=>{let i=[];for(const o of e.mapping||[])i=[...i,...o(e.workspaces)];for(const r of e.description||[])i=[...i,...r(e.workspaces)];return{gitPushHook:e.gitPushHook,gitPushOptions:e.gitPushOptions,workspaces:e.workspaces,mapping:i}},e.override=async()=>{globalThis.__console=globalThis.console,globalThis.console=new Proxy({},{get(e,i,o){return"log"===i?(...e)=>{globalThis.__console.log(...e.map((e,i)=>0===i?r.underline(r.bgGreen(r.white(` [${String(e)}] `))):r.green("[")+String(e)+r.green("]")))}:"error"===i?(...e)=>{globalThis.__console.log(...e.map((e,i)=>0===i?r.underline(r.bgRed(r.white(` [${String(e)}] `))):r.red(String(e))))}:void Reflect.get(e,i,o)}})};e.globalInject=()=>{globalThis.resolver=e.resolver,globalThis.descResolver=e.descResolver,globalThis.configCreate=e.configCreate}}(utils),Object.defineProperty(sync,"__esModule",{value:!0}),sync.run=void 0;const fs=require$$0__default$1.default,path=require$$0__default.default,minimist=require$$2__default$1.default,utils_1=utils,fsExtra=require$$4__default.default,run=async()=>{(0,utils_1.globalInject)(),await(0,utils_1.override)();var i,o,e=minimist(process.argv.slice(2));let t=null;if(!(t=e.c?require(path.resolve(e.c)):require(path.resolve(".syncrc.js"))))throw e="The config file not exist.",console.log("Error",e),Error(e);for(let e in t.mapping)t.mapping[e].action===utils_1.Action.CREATE?(console.log(t.mapping[e].action,t.mapping[e].origin,t.mapping[e].target+".desc"),await new Promise((i,o)=>fs.writeFile(t.mapping[e].target+".desc",t.mapping[e].origin,e=>{e?o(e):i(null)}))):t.mapping[e].action===utils_1.Action.COPY?(console.log(t.mapping[e].action+" - Compare:"+t.mapping[e].changedCheckAndBackup,t.mapping[e].origin,t.mapping[e].target),i=await new Promise((o,r)=>{fs.stat(t.mapping[e].origin,(e,i)=>{e?(console.error("ERROR",e),o(null)):i.isFile()?o(utils_1.FileType.FILE):i.isDirectory()?o(utils_1.FileType.FOLDER):r("not file and not folder")})}),o=await new Promise((o,r)=>{fs.stat(t.mapping[e].target,(e,i)=>{e?(console.error("ERROR",e),o(null)):i.isFile()?o(utils_1.FileType.FILE):i.isDirectory()?o(utils_1.FileType.FOLDER):r("not file and not folder")})}),i===utils_1.FileType.FILE&&o===utils_1.FileType.FILE&&t.mapping[e].changedCheckAndBackup&&(i=await new Promise((o,r)=>fs.readFile(t.mapping[e].origin,(e,i)=>{e?r(e):o(i)})),o=await new Promise((o,r)=>fs.readFile(t.mapping[e].target,(e,i)=>{e?r(e):o(i)})),String(i).trim()==String(o).trim()?(console.log("Same",!0),console.log("Backup",!1)):(console.log("Same",!1),await new Promise((i,o)=>fs.rename(t.mapping[e].target,t.mapping[e].target+".backup",e=>{e?o(e):i(null)})),console.log("Backup",t.mapping[e].target+".backup"))),await fsExtra.copy(t.mapping[e].origin,t.mapping[e].target)):t.mapping[e].action===utils_1.Action.REMOVE&&(console.log(t.mapping[e].action,t.mapping[e].origin,t.mapping[e].target),await fsExtra.remove(t.mapping[e].target));for(const a in t.workspaces){var[r,n]=t.workspaces[a];n&&(t.gitPushHook?"string"==typeof t.gitPushHook?await(0,utils_1.command)({cmd:["sh",path.resolve(t.gitPushHook),r,t.gitPushOptions?.origin||"master",t.gitPushOptions?.comments||"Auto sync module"]}):"function"==typeof t.gitPushHook&&await t.gitPushHook(t.workspaces[a],utils_1.command,globalThis.__console):(n=r,await(r=void 0,utils_1.command)({cmd:["sh",path.join(__dirname,"gitpush.sh"),n,r?.origin||"master",r?.comments||"Common Module Sync"]})))}};sync.run=run,function(e){var r=commonjsGlobal&&commonjsGlobal.__createBinding||(Object.create?function(e,i,o,r){void 0===r&&(r=o);var t=Object.getOwnPropertyDescriptor(i,o);t&&("get"in t?i.__esModule:!t.writable&&!t.configurable)||(t={enumerable:!0,get:function(){return i[o]}}),Object.defineProperty(e,r,t)}:function(e,i,o,r){e[r=void 0===r?o:r]=i[o]}),i=commonjsGlobal&&commonjsGlobal.__exportStar||function(e,i){for(var o in e)"default"===o||Object.prototype.hasOwnProperty.call(i,o)||r(i,e,o)};Object.defineProperty(e,"__esModule",{value:!0}),i(sync,e),i(utils,e)}(es);var index=getDefaultExportFromCjs(es);module.exports=index;
